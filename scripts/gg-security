#!/bin/bash

# gg智能体安全管理脚本
# 提供统一的安全管理接口

set -e

# 脚本配置
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
LOG_FILE="$PROJECT_ROOT/logs/security_manager.log"
CONFIG_DIR="$PROJECT_ROOT/config"
LOGS_DIR="$PROJECT_ROOT/logs"
BACKUP_DIR="$PROJECT_ROOT/backups/security"

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 日志函数
log_info() {
    echo -e "[INFO] $1" | tee -a "$LOG_FILE"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] INFO: $1" >> "$LOG_FILE"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1" | tee -a "$LOG_FILE"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] SUCCESS: $1" >> "$LOG_FILE"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1" | tee -a "$LOG_FILE"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] WARNING: $1" >> "$LOG_FILE"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1" | tee -a "$LOG_FILE"
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $1" >> "$LOG_FILE"
}

# 检查依赖
check_dependencies() {
    log_info "检查依赖..."
    
    # 检查Python
    if ! command -v python3 &> /dev/null; then
        log_error "Python3 未安装"
        return 1
    fi
    
    # 检查必要的Python模块
    python3 -c "import json, hashlib, logging" 2>/dev/null || {
        log_error "缺少必要的Python模块"
        return 1
    }
    
    log_success "依赖检查通过"
    return 0
}

# 初始化目录结构
init_directories() {
    log_info "初始化目录结构..."
    
    # 创建必要目录
    mkdir -p "$CONFIG_DIR"
    mkdir -p "$LOGS_DIR"
    mkdir -p "$BACKUP_DIR"
    mkdir -p "$PROJECT_ROOT/outputs/security"
    
    log_success "目录结构初始化完成"
}

# 初始化安全系统
init_security() {
    log_info "初始化安全系统..."
    
    check_dependencies || return 1
    init_directories
    
    # 检查配置文件
    if [[ ! -f "$CONFIG_DIR/security_config.json" ]]; then
        log_warning "安全配置文件不存在，将使用默认配置"
    fi
    
    if [[ ! -f "$CONFIG_DIR/permissions.json" ]]; then
        log_warning "权限配置文件不存在，将使用默认权限"
    fi
    
    if [[ ! -f "$CONFIG_DIR/security_policies.json" ]]; then
        log_warning "安全策略文件不存在，将使用默认策略"
    fi
    
    log_success "安全系统初始化完成"
}

# 显示安全状态
show_status() {
    log_info "安全系统状态:"
    
    # 检查配置文件
    echo "配置文件: $([ -f "$CONFIG_DIR/security_config.json" ] && echo "✓ 存在" || echo "✗ 缺失")"
    echo "权限配置: $([ -f "$CONFIG_DIR/permissions.json" ] && echo "✓ 存在" || echo "✗ 缺失")"
    echo "安全策略: $([ -f "$CONFIG_DIR/security_policies.json" ] && echo "✓ 存在" || echo "✗ 缺失")"
    
    # 检查日志文件
    if [[ -f "$LOGS_DIR/security_audit.log" ]]; then
        local log_size=$(wc -l < "$LOGS_DIR/security_audit.log" 2>/dev/null || echo "0")
        echo "审计日志: ✓ 存在 ($log_size 行)"
    else
        echo "审计日志: ✗ 不存在"
    fi
    
    # 检查安全管理器
    if python3 "$SCRIPT_DIR/security_manager.py" check-user system &>/dev/null; then
        echo "安全管理器: ✓ 正常"
    else
        echo "安全管理器: ✗ 异常"
    fi
}

# 生成安全报告
generate_report() {
    local days=${1:-7}
    log_info "生成安全报告 (最近 $days 天)..."
    
    local report_file="$PROJECT_ROOT/outputs/security/security_report_$(date +%Y%m%d_%H%M%S).json"
    
    if python3 "$SCRIPT_DIR/security_manager.py" report "$days" > "$report_file"; then
        log_success "安全报告已生成: $report_file"
        
        # 显示报告摘要
        if command -v jq &> /dev/null; then
            echo "\n=== 报告摘要 ==="
            jq -r '.summary | to_entries[] | "\(.key): \(.value)"' "$report_file" 2>/dev/null || {
                echo "报告文件: $report_file"
            }
        else
            echo "报告文件: $report_file"
            echo "提示: 安装 jq 以获得更好的报告显示效果"
        fi
    else
        log_error "安全报告生成失败"
        return 1
    fi
}

# 检查用户状态
check_user() {
    local user_id="$1"
    
    if [[ -z "$user_id" ]]; then
        log_error "请提供用户ID"
        return 1
    fi
    
    log_info "检查用户状态: $user_id"
    python3 "$SCRIPT_DIR/security_manager.py" check-user "$user_id"
}

# 验证操作
validate_operation() {
    local user_id="$1"
    local operation="$2"
    local target="$3"
    
    if [[ -z "$user_id" || -z "$operation" || -z "$target" ]]; then
        log_error "请提供: 用户ID 操作类型 目标"
        return 1
    fi
    
    log_info "验证操作: $user_id -> $operation -> $target"
    python3 "$SCRIPT_DIR/security_manager.py" validate "$user_id" "$operation" "$target"
}

# 运行安全测试
run_test() {
    log_info "运行安全系统测试..."
    
    # 测试安全管理器
    if python3 "$SCRIPT_DIR/security_manager.py" check-user test_user &>/dev/null; then
        log_success "安全管理器测试通过"
    else
        log_error "安全管理器测试失败"
        return 1
    fi
    
    # 测试安全集成
    if python3 "$SCRIPT_DIR/security_integration.py" &>/dev/null; then
        log_success "安全集成测试通过"
    else
        log_error "安全集成测试失败"
        return 1
    fi
    
    log_success "安全系统测试完成"
}

# 备份安全配置
backup_config() {
    log_info "备份安全配置..."
    
    local backup_timestamp=$(date +%Y%m%d_%H%M%S)
    local backup_path="$BACKUP_DIR/config_$backup_timestamp"
    
    mkdir -p "$backup_path"
    
    # 备份配置文件
    if [[ -d "$CONFIG_DIR" ]]; then
        cp -r "$CONFIG_DIR"/* "$backup_path/" 2>/dev/null || true
    fi
    
    # 备份审计日志
    if [[ -f "$LOGS_DIR/security_audit.log" ]]; then
        cp "$LOGS_DIR/security_audit.log" "$backup_path/security_audit_$backup_timestamp.log"
    fi
    
    # 创建备份清单
    cat > "$backup_path/backup_info.json" << EOF
{
  "timestamp": "$backup_timestamp",
  "backup_date": "$(date -Iseconds)",
  "files_backed_up": [
$(find "$backup_path" -type f -not -name "backup_info.json" | sed 's/.*\/\(.*\)/    "\1"/' | paste -sd ',' -)
  ],
  "backup_size": "$(du -sh "$backup_path" | cut -f1)"
}
EOF
    
    log_success "配置备份完成: $backup_path"
}

# 恢复安全配置
restore_config() {
    local backup_name="$1"
    
    if [[ -z "$backup_name" ]]; then
        log_info "可用的备份:"
        ls -la "$BACKUP_DIR" | grep "^d" | awk '{print $NF}' | grep -v "^\\.$" | grep -v "^\\.\\.$"
        return 0
    fi
    
    local backup_path="$BACKUP_DIR/$backup_name"
    
    if [[ ! -d "$backup_path" ]]; then
        log_error "备份不存在: $backup_name"
        return 1
    fi
    
    log_info "恢复安全配置: $backup_name"
    
    # 备份当前配置
    backup_config
    
    # 恢复配置文件
    if [[ -d "$backup_path" ]]; then
        cp -r "$backup_path"/*.json "$CONFIG_DIR/" 2>/dev/null || true
        log_success "配置恢复完成"
    else
        log_error "配置恢复失败"
        return 1
    fi
}

# 清理旧数据
cleanup() {
    local days=${1:-30}
    log_info "清理 $days 天前的数据..."
    
    # 清理旧备份
    find "$BACKUP_DIR" -type d -mtime +"$days" -exec rm -rf {} + 2>/dev/null || true
    
    # 清理旧报告
    find "$PROJECT_ROOT/outputs/security" -name "*.json" -mtime +"$days" -delete 2>/dev/null || true
    
    # 轮转审计日志
    if [[ -f "$LOGS_DIR/security_audit.log" ]]; then
        local log_size=$(wc -l < "$LOGS_DIR/security_audit.log")
        if [[ $log_size -gt 10000 ]]; then
            mv "$LOGS_DIR/security_audit.log" "$LOGS_DIR/security_audit_$(date +%Y%m%d).log"
            touch "$LOGS_DIR/security_audit.log"
            log_info "审计日志已轮转"
        fi
    fi
    
    log_success "数据清理完成"
}

# 显示配置
show_config() {
    log_info "安全配置:"
    
    if [[ -f "$CONFIG_DIR/security_config.json" ]]; then
        echo "\n=== 安全配置 ==="
        if command -v jq &> /dev/null; then
            jq '.' "$CONFIG_DIR/security_config.json" 2>/dev/null || cat "$CONFIG_DIR/security_config.json"
        else
            cat "$CONFIG_DIR/security_config.json"
        fi
    fi
    
    if [[ -f "$CONFIG_DIR/permissions.json" ]]; then
        echo "\n=== 权限配置 ==="
        if command -v jq &> /dev/null; then
            jq 'keys' "$CONFIG_DIR/permissions.json" 2>/dev/null || echo "权限配置文件存在"
        else
            echo "权限配置文件存在"
        fi
    fi
    
    if [[ -f "$CONFIG_DIR/security_policies.json" ]]; then
        echo "\n=== 安全策略 ==="
        if command -v jq &> /dev/null; then
            jq '[.[] | {name: .name, enabled: .enabled, priority: .priority}]' "$CONFIG_DIR/security_policies.json" 2>/dev/null || echo "安全策略文件存在"
        else
            echo "安全策略文件存在"
        fi
    fi
}

# 显示帮助
show_help() {
    cat << EOF
gg安全管理脚本

用法: $0 <command> [options]

命令:
  init                    - 初始化安全系统
  status                  - 显示安全系统状态
  report [days]           - 生成安全报告 (默认7天)
  check-user <user_id>    - 检查用户状态
  validate <user> <op> <target> - 验证操作
  test                    - 运行安全测试
  backup                  - 备份安全配置
  restore [backup_name]   - 恢复安全配置
  cleanup [days]          - 清理旧数据 (默认30天)
  config                  - 显示配置
  help                    - 显示此帮助

示例:
  $0 init
  $0 status
  $0 report 14
  $0 check-user admin
  $0 validate user write outputs/test.txt
  $0 backup
  $0 cleanup 7

EOF
}

# 主函数
main() {
    local command="$1"
    shift || true
    
    case "$command" in
        "init")
            init_security
            ;;
        "status")
            show_status
            ;;
        "report")
            generate_report "$@"
            ;;
        "check-user")
            check_user "$@"
            ;;
        "validate")
            validate_operation "$@"
            ;;
        "test")
            run_test
            ;;
        "backup")
            backup_config
            ;;
        "restore")
            restore_config "$@"
            ;;
        "cleanup")
            cleanup "$@"
            ;;
        "config")
            show_config
            ;;
        "help" | "--help" | "-h")
            show_help
            ;;
        "")
            log_error "请提供命令"
            show_help
            exit 1
            ;;
        *)
            log_error "未知命令: $command"
            show_help
            exit 1
            ;;
    esac
}

# 执行主函数
main "$@"