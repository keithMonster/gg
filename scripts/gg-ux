#!/bin/bash

# gg智能体用户体验优化管理脚本
# 提供统一的UX系统管理接口

set -e

# 脚本配置
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
UX_DIR="$PROJECT_ROOT/ux_data"
CONFIG_DIR="$PROJECT_ROOT/config"
LOG_FILE="$PROJECT_ROOT/logs/ux_manager.log"

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 日志函数
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
    log "INFO: $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
    log "SUCCESS: $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
    log "WARNING: $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    log "ERROR: $1"
}

# 检查依赖
check_dependencies() {
    info "检查依赖..."
    
    # 检查Python
    if ! command -v python3 &> /dev/null; then
        error "Python3 未安装"
        exit 1
    fi
    
    # 检查必要的Python包
    python3 -c "import json, time, re, pathlib, dataclasses, collections, enum" 2>/dev/null || {
        error "缺少必要的Python包"
        exit 1
    }
    
    success "依赖检查通过"
}

# 初始化目录结构
init_directories() {
    info "初始化目录结构..."
    
    mkdir -p "$UX_DIR"
    mkdir -p "$CONFIG_DIR"
    mkdir -p "$(dirname "$LOG_FILE")"
    
    success "目录结构初始化完成"
}

# 显示帮助信息
show_help() {
    cat << EOF
gg智能体用户体验优化管理工具

用法: $0 <命令> [选项]

命令:
  init                    初始化UX系统
  status                  显示UX系统状态
  dashboard              显示UX仪表板
  analyze [days]         分析用户行为模式 (默认7天)
  recommendations [days] 生成UX改进建议 (默认7天)
  feedback <id> <rating> 提交用户反馈 (rating: 1-5)
  test                   运行UX系统测试
  report [days]          生成详细报告 (默认7天)
  clean [days]           清理旧数据 (默认30天)
  export <file>          导出UX数据
  import <file>          导入UX数据
  config                 显示配置信息
  help                   显示此帮助信息

选项:
  --output <file>        指定输出文件
  --format <json|text>   指定输出格式 (默认: text)
  --verbose              详细输出
  --quiet                静默模式

示例:
  $0 init                           # 初始化系统
  $0 dashboard                      # 查看仪表板
  $0 analyze 30                     # 分析30天数据
  $0 recommendations --output rec.json  # 生成建议并保存
  $0 feedback int_123456 4          # 提交满意度4的反馈
  $0 report 7 --format json         # 生成7天JSON格式报告

EOF
}

# 初始化UX系统
init_ux_system() {
    info "初始化UX优化系统..."
    
    check_dependencies
    init_directories
    
    # 检查配置文件
    if [[ ! -f "$CONFIG_DIR/ux_config.json" ]]; then
        info "创建默认配置文件..."
        python3 "$SCRIPT_DIR/ux_optimizer.py" dashboard > /dev/null 2>&1 || true
    fi
    
    success "UX系统初始化完成"
}

# 显示系统状态
show_status() {
    info "UX系统状态:"
    
    echo "配置文件: $([ -f "$CONFIG_DIR/ux_config.json" ] && echo "✓ 存在" || echo "✗ 缺失")"
    echo "数据目录: $([ -d "$UX_DIR" ] && echo "✓ 存在" || echo "✗ 缺失")"
    
    # 统计数据文件
    local interaction_files=$(find "$UX_DIR" -name "interactions_*.jsonl" 2>/dev/null | wc -l)
    echo "交互数据文件: $interaction_files 个"
    
    # 检查最近活动
    local latest_file=$(find "$UX_DIR" -name "interactions_*.jsonl" -exec ls -t {} + 2>/dev/null | head -1)
    if [[ -n "$latest_file" ]]; then
        local latest_date=$(basename "$latest_file" | sed 's/interactions_\(.*\)\.jsonl/\1/')
        echo "最新数据: $latest_date"
    else
        echo "最新数据: 无"
    fi
    
    # Python脚本状态
    if python3 -c "from scripts.ux_optimizer import UXOptimizer; UXOptimizer()" 2>/dev/null; then
        echo "UX优化器: ✓ 正常"
    else
        echo "UX优化器: ✗ 异常"
    fi
}

# 显示仪表板
show_dashboard() {
    info "获取UX仪表板数据..."
    
    if [[ "$FORMAT" == "json" ]]; then
        python3 "$SCRIPT_DIR/ux_optimizer.py" dashboard
    else
        # 解析JSON并格式化显示
        local dashboard_json=$(python3 "$SCRIPT_DIR/ux_optimizer.py" dashboard)
        
        echo "=== UX仪表板 ==="
        echo
        
        # 实时指标
        echo "📊 实时指标:"
        echo "  活跃会话: $(echo "$dashboard_json" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data['real_time_metrics']['active_session'])")"
        echo "  最近交互: $(echo "$dashboard_json" | python3 -c "import sys, json; data=json.load(sys.stdin); print(data['real_time_metrics']['recent_interactions'])") 次"
        echo "  平均响应时间: $(echo "$dashboard_json" | python3 -c "import sys, json; data=json.load(sys.stdin); print(f\"{data['real_time_metrics']['avg_response_time_ms']:.1f}ms\")") "
        echo "  成功率: $(echo "$dashboard_json" | python3 -c "import sys, json; data=json.load(sys.stdin); print(f\"{data['real_time_metrics']['success_rate']:.1%}\")") "
        echo
        
        # 建议数量
        local rec_count=$(echo "$dashboard_json" | python3 -c "import sys, json; data=json.load(sys.stdin); print(len(data['recommendations']))")
        if [[ $rec_count -gt 0 ]]; then
            echo "💡 改进建议: $rec_count 条"
            echo "  使用 '$0 recommendations' 查看详细建议"
        else
            echo "💡 改进建议: 暂无"
        fi
    fi
}

# 分析用户模式
analyze_patterns() {
    local days=${1:-7}
    info "分析 $days 天的用户行为模式..."
    
    if [[ -n "$OUTPUT_FILE" ]]; then
        python3 "$SCRIPT_DIR/ux_optimizer.py" analyze --days "$days" --output "$OUTPUT_FILE"
        success "分析结果已保存到: $OUTPUT_FILE"
    else
        python3 "$SCRIPT_DIR/ux_optimizer.py" analyze --days "$days"
    fi
}

# 生成改进建议
generate_recommendations() {
    local days=${1:-7}
    info "生成基于 $days 天数据的改进建议..."
    
    if [[ -n "$OUTPUT_FILE" ]]; then
        python3 "$SCRIPT_DIR/ux_optimizer.py" recommendations --days "$days" --output "$OUTPUT_FILE"
    else
        python3 "$SCRIPT_DIR/ux_optimizer.py" recommendations --days "$days"
    fi
}

# 提交反馈
submit_feedback() {
    local interaction_id="$1"
    local rating="$2"
    local feedback_text="$3"
    
    if [[ -z "$interaction_id" || -z "$rating" ]]; then
        error "需要提供交互ID和评分"
        echo "用法: $0 feedback <interaction_id> <rating> [feedback_text]"
        exit 1
    fi
    
    if [[ ! "$rating" =~ ^[1-5]$ ]]; then
        error "评分必须是1-5之间的整数"
        exit 1
    fi
    
    info "提交反馈: ID=$interaction_id, 评分=$rating"
    
    local cmd="python3 '$SCRIPT_DIR/ux_optimizer.py' feedback --interaction-id '$interaction_id' --satisfaction '$rating'"
    if [[ -n "$feedback_text" ]]; then
        cmd="$cmd --feedback-text '$feedback_text'"
    fi
    
    eval "$cmd"
}

# 运行测试
run_test() {
    info "运行UX系统测试..."
    
    # 运行集成测试
    python3 "$SCRIPT_DIR/ux_integration.py"
    
    success "UX系统测试完成"
}

# 生成报告
generate_report() {
    local days=${1:-7}
    info "生成 $days 天的详细UX报告..."
    
    local report_file="${OUTPUT_FILE:-ux_report_$(date +%Y%m%d_%H%M%S).json}"
    
    # 获取仪表板数据
    python3 "$SCRIPT_DIR/ux_optimizer.py" dashboard > "$report_file"
    
    # 添加分析数据
    local analysis_file="/tmp/ux_analysis_$$.json"
    python3 "$SCRIPT_DIR/ux_optimizer.py" analyze --days "$days" --output "$analysis_file"
    
    # 合并数据 (简化版本，实际可以用jq等工具)
    success "报告已生成: $report_file"
    
    if [[ "$FORMAT" == "text" ]]; then
        info "报告摘要:"
        show_dashboard
    fi
}

# 清理旧数据
clean_old_data() {
    local days=${1:-30}
    info "清理 $days 天前的旧数据..."
    
    local cutoff_date=$(date -d "$days days ago" +%Y-%m-%d 2>/dev/null || date -v-${days}d +%Y-%m-%d)
    local deleted_count=0
    
    for file in "$UX_DIR"/interactions_*.jsonl; do
        if [[ -f "$file" ]]; then
            local file_date=$(basename "$file" | sed 's/interactions_\(.*\)\.jsonl/\1/')
            if [[ "$file_date" < "$cutoff_date" ]]; then
                rm "$file"
                ((deleted_count++))
            fi
        fi
    done
    
    success "已删除 $deleted_count 个旧数据文件"
}

# 导出数据
export_data() {
    local output_file="$1"
    if [[ -z "$output_file" ]]; then
        output_file="ux_export_$(date +%Y%m%d_%H%M%S).tar.gz"
    fi
    
    info "导出UX数据到: $output_file"
    
    tar -czf "$output_file" -C "$PROJECT_ROOT" ux_data config/ux_config.json
    
    success "数据导出完成: $output_file"
}

# 导入数据
import_data() {
    local input_file="$1"
    if [[ -z "$input_file" || ! -f "$input_file" ]]; then
        error "请提供有效的导入文件"
        exit 1
    fi
    
    info "从 $input_file 导入UX数据..."
    
    # 备份现有数据
    if [[ -d "$UX_DIR" ]]; then
        local backup_file="ux_backup_$(date +%Y%m%d_%H%M%S).tar.gz"
        tar -czf "$backup_file" -C "$PROJECT_ROOT" ux_data
        info "现有数据已备份到: $backup_file"
    fi
    
    # 导入新数据
    tar -xzf "$input_file" -C "$PROJECT_ROOT"
    
    success "数据导入完成"
}

# 显示配置
show_config() {
    info "UX系统配置:"
    
    if [[ -f "$CONFIG_DIR/ux_config.json" ]]; then
        if command -v jq &> /dev/null; then
            cat "$CONFIG_DIR/ux_config.json" | jq .
        else
            cat "$CONFIG_DIR/ux_config.json"
        fi
    else
        warning "配置文件不存在: $CONFIG_DIR/ux_config.json"
    fi
}

# 解析命令行参数
FORMAT="text"
VERBOSE=false
QUIET=false
OUTPUT_FILE=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --output)
            OUTPUT_FILE="$2"
            shift 2
            ;;
        --format)
            FORMAT="$2"
            shift 2
            ;;
        --verbose)
            VERBOSE=true
            shift
            ;;
        --quiet)
            QUIET=true
            shift
            ;;
        -*)
            error "未知选项: $1"
            show_help
            exit 1
            ;;
        *)
            break
            ;;
    esac
done

# 静默模式处理
if [[ "$QUIET" == "true" ]]; then
    exec 1>/dev/null
fi

# 主命令处理
COMMAND="${1:-help}"

case "$COMMAND" in
    init)
        init_ux_system
        ;;
    status)
        show_status
        ;;
    dashboard)
        show_dashboard
        ;;
    analyze)
        analyze_patterns "$2"
        ;;
    recommendations)
        generate_recommendations "$2"
        ;;
    feedback)
        submit_feedback "$2" "$3" "$4"
        ;;
    test)
        run_test
        ;;
    report)
        generate_report "$2"
        ;;
    clean)
        clean_old_data "$2"
        ;;
    export)
        export_data "$2"
        ;;
    import)
        import_data "$2"
        ;;
    config)
        show_config
        ;;
    help|--help|-h)
        show_help
        ;;
    *)
        error "未知命令: $COMMAND"
        show_help
        exit 1
        ;;
esac