#!/bin/bash

# gg智能体性能监控管理脚本
# 提供性能监控的启动、停止、报告等功能

set -euo pipefail

# 脚本目录
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"
PERF_MONITOR="$SCRIPT_DIR/performance_monitor.py"
METRICS_DIR="$PROJECT_ROOT/metrics"
CONFIG_DIR="$PROJECT_ROOT/config"

# 颜色定义
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 日志函数
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# 检查依赖
check_dependencies() {
    if ! command -v python3 &> /dev/null; then
        log_error "Python3 未安装"
        exit 1
    fi
    
    if ! python3 -c "import psutil" &> /dev/null; then
        log_error "psutil 模块未安装，请运行: pip3 install psutil"
        exit 1
    fi
}

# 创建必要的目录
setup_directories() {
    mkdir -p "$METRICS_DIR"
    mkdir -p "$CONFIG_DIR"
    log_info "目录结构已准备完成"
}

# 启动性能监控
start_monitoring() {
    log_info "启动性能监控..."
    
    # 检查是否已经在运行
    if pgrep -f "performance_monitor.py" > /dev/null; then
        log_warning "性能监控已在运行中"
        return 0
    fi
    
    # 后台启动监控
    nohup python3 "$PERF_MONITOR" start > "$METRICS_DIR/monitor.log" 2>&1 &
    local pid=$!
    
    # 等待启动
    sleep 2
    
    if kill -0 $pid 2>/dev/null; then
        echo $pid > "$METRICS_DIR/monitor.pid"
        log_success "性能监控已启动 (PID: $pid)"
    else
        log_error "性能监控启动失败"
        exit 1
    fi
}

# 停止性能监控
stop_monitoring() {
    log_info "停止性能监控..."
    
    local pid_file="$METRICS_DIR/monitor.pid"
    
    if [[ -f "$pid_file" ]]; then
        local pid=$(cat "$pid_file")
        if kill -0 $pid 2>/dev/null; then
            kill $pid
            rm -f "$pid_file"
            log_success "性能监控已停止"
        else
            log_warning "监控进程不存在，清理PID文件"
            rm -f "$pid_file"
        fi
    else
        # 尝试通过进程名停止
        if pgrep -f "performance_monitor.py" > /dev/null; then
            pkill -f "performance_monitor.py"
            log_success "性能监控已停止"
        else
            log_warning "性能监控未在运行"
        fi
    fi
}

# 重启性能监控
restart_monitoring() {
    log_info "重启性能监控..."
    stop_monitoring
    sleep 1
    start_monitoring
}

# 查看监控状态
show_status() {
    log_info "检查性能监控状态..."
    
    local pid_file="$METRICS_DIR/monitor.pid"
    
    if [[ -f "$pid_file" ]]; then
        local pid=$(cat "$pid_file")
        if kill -0 $pid 2>/dev/null; then
            log_success "性能监控正在运行 (PID: $pid)"
            
            # 显示基本统计
            python3 "$PERF_MONITOR" status
        else
            log_warning "PID文件存在但进程不存在，清理PID文件"
            rm -f "$pid_file"
        fi
    else
        if pgrep -f "performance_monitor.py" > /dev/null; then
            log_warning "监控进程存在但PID文件丢失"
        else
            log_info "性能监控未运行"
        fi
    fi
}

# 生成性能报告
generate_report() {
    local days=${1:-1}
    local output_file=${2:-""}
    
    log_info "生成 $days 天的性能报告..."
    
    if [[ -n "$output_file" ]]; then
        python3 "$PERF_MONITOR" report --days "$days" --output "$output_file"
        log_success "报告已保存到: $output_file"
    else
        python3 "$PERF_MONITOR" report --days "$days"
    fi
}

# 清理旧数据
cleanup_old_data() {
    local retention_days=${1:-7}
    
    log_info "清理 $retention_days 天前的性能数据..."
    
    # 删除旧的指标文件
    find "$METRICS_DIR" -name "*.jsonl" -type f -mtime +$retention_days -delete
    
    # 删除旧的日志文件
    find "$METRICS_DIR" -name "*.log" -type f -mtime +$retention_days -delete
    
    log_success "数据清理完成"
}

# 监控实时指标
watch_metrics() {
    log_info "实时监控系统指标 (按 Ctrl+C 退出)..."
    
    while true; do
        clear
        echo "=== gg智能体性能监控 ==="
        echo "时间: $(date)"
        echo
        
        # CPU和内存使用率
        if command -v top &> /dev/null; then
            echo "=== 系统资源 ==="
            top -l 1 -n 0 | grep "CPU usage\|PhysMem"
            echo
        fi
        
        # 监控状态
        echo "=== 监控状态 ==="
        show_status
        echo
        
        # 最近的指标
        if [[ -f "$METRICS_DIR/monitor.log" ]]; then
            echo "=== 最近日志 ==="
            tail -5 "$METRICS_DIR/monitor.log"
        fi
        
        sleep 5
    done
}

# 性能测试
run_performance_test() {
    log_info "运行性能测试..."
    
    # 启动监控
    start_monitoring
    sleep 2
    
    # 模拟一些任务
    log_info "执行测试任务..."
    
    # 测试CPU密集型任务
    python3 -c "
import time
import math
start = time.time()
for i in range(1000000):
    math.sqrt(i)
print(f'CPU测试完成，耗时: {time.time() - start:.2f}秒')
"
    
    # 测试内存使用
    python3 -c "
import time
data = []
for i in range(100000):
    data.append(f'test_data_{i}' * 10)
print(f'内存测试完成，创建了 {len(data)} 个对象')
time.sleep(1)
"
    
    sleep 3
    
    # 生成测试报告
    log_info "生成测试报告..."
    generate_report 1 "$METRICS_DIR/performance_test_report.json"
    
    log_success "性能测试完成"
}

# 显示帮助信息
show_help() {
    cat << EOF
gg智能体性能监控管理工具

用法: $0 <命令> [选项]

命令:
  start                    启动性能监控
  stop                     停止性能监控
  restart                  重启性能监控
  status                   查看监控状态
  report [days] [output]   生成性能报告
  watch                    实时监控指标
  test                     运行性能测试
  cleanup [days]           清理旧数据
  help                     显示此帮助信息

示例:
  $0 start                           # 启动监控
  $0 report 7                        # 生成7天报告
  $0 report 3 /tmp/perf_report.json  # 生成3天报告并保存
  $0 cleanup 14                      # 清理14天前的数据

EOF
}

# 主函数
main() {
    # 检查参数
    if [[ $# -eq 0 ]]; then
        show_help
        exit 1
    fi
    
    # 检查依赖
    check_dependencies
    
    # 设置目录
    setup_directories
    
    # 执行命令
    case "$1" in
        start)
            start_monitoring
            ;;
        stop)
            stop_monitoring
            ;;
        restart)
            restart_monitoring
            ;;
        status)
            show_status
            ;;
        report)
            generate_report "${2:-1}" "${3:-}"
            ;;
        watch)
            watch_metrics
            ;;
        monitor)
            if [ -z "$2" ]; then
                echo "错误: 请提供要监控的命令"
                echo "用法: $0 monitor <command>"
                exit 1
            fi
            shift
            monitor_command "$@"
            ;;
        test)
            run_performance_test
            ;;
        cleanup)
            cleanup_old_data "${2:-7}"
            ;;
        help|--help|-h)
            show_help
            ;;
        *)
            log_error "未知命令: $1"
            show_help
            exit 1
            ;;
    esac
}

# 监控命令执行
monitor_command() {
    local command="$*"
    log_info "开始监控命令: $command"
    
    # 使用Python脚本进行详细监控
    python3 -c "
import sys
sys.path.append('$SCRIPT_DIR')
from performance_monitor import PerformanceMonitor

monitor = PerformanceMonitor()
result = monitor.monitor_command('$command')

if result:
    print(f'执行时间: {result[\"execution_time\"]:.2f}秒')
    print(f'CPU使用变化: {result[\"cpu_usage_change\"]:.1f}%')
    print(f'内存使用变化: {result[\"memory_usage_change\"]:.1f}%')
    print(f'退出代码: {result[\"exit_code\"]}')
    if result['stdout']:
        print('输出:', result['stdout'][:200])
    if result['stderr']:
        print('错误:', result['stderr'][:200])
else:
    print('监控失败')
"
}

# 执行主函数
main "$@"